IGNORE: "[ \t\n]";

FLOAT_NUMBER: "0\.?[0-9]*|[1-9][0-9]*\.?[0-9]*|\.[0-9]+";

ADD_OPER: "[+-]";
MULT_OPER: "[*/%]";
COMP_OPER: "(==)|(>=)|(<=)|>|<|(!=)";

VARIABLE: "[a-zA-Z_][a-zA-Z0-9_]*";

main: statement* [EOF];

statement:
      expr ";"
    | VARIABLE "=" expr ";"
    | "while" "(" expr ")" "{" statement* "}"
    | "if" "(" expr ")" "{" statement* "}" "else" "{" statement* "}"
    | "if" "(" expr ")" "{" statement* "}"
    | "return" expr ";"
    | "return" ";";

expr:
    ADD_OPER expr | unary;
unary:
    additive COMP_OPER unary | additive;
additive:
    multitive ADD_OPER additive | multitive;
multitive:
    call MULT_OPER multitive | call;

call:
    fndef "(" csexpr ")" | fndef "(" ")" | fndef;
csexpr:
    expr "," csexpr | expr;

fndef:
      "function" VARIABLE "(" csvar ")" "{" statement* "}"
    | "function" VARIABLE "(" ")" "{" statement* "}"
    | primary;
csvar:
    VARIABLE "," csvar | VARIABLE;

primary:
      "(" expr ")"
    | atom;
atom:
      FLOAT_NUMBER
    | VARIABLE;
